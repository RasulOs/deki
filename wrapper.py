import subprocess
import argparse
import os
import sys

def init():
    # Initialize the argument parser
    parser = argparse.ArgumentParser(description='Wrapper script to run YOLO detection and image description in sequence.')

    # Common arguments
    parser.add_argument('--input_image', required=True, help='Path to the input image.')
    parser.add_argument('--weights_file', required=True, help='Path to the YOLO weights file.')
    parser.add_argument('--output_dir', default='./output', help='Output directory for YOLO results.')

    # Image description-specific arguments
    parser.add_argument('--model_to_use', choices=['llama', 'blip'], default='llama', help='Model to use for captioning.')
    parser.add_argument('--save_images', action='store_true', help='Flag to save intermediate images.')
    parser.add_argument('--icon_detection_path', required=True, help='Path to the icon detection model.')
    parser.add_argument('--cache_directory', default='./models_cache', help='Cache directory for models.')
    parser.add_argument('--huggingface_token', default='your_token', help='Hugging Face token for model downloads.')
    parser.add_argument('--no-captioning', action='store_true', help='Disable any image captioning')

    args = parser.parse_args()

    # Run YOLO detection script
    print("Running YOLO detection...")
    yolo_command = [
        sys.executable,  # Use the same Python interpreter
        'yolo_script.py',
        args.input_image,
        args.weights_file,
        args.output_dir
    ]
    subprocess.run(yolo_command, check=True)

    # Determine the path to the labels file generated by YOLO script
    from os.path import basename, splitext

    base_name = splitext(basename(args.input_image))[0]
    labels_dir = os.path.join(args.output_dir, 'yolo_labels_output', 'labels')
    labels_file = os.path.join(labels_dir, base_name + '.txt')

    if not os.path.isfile(labels_file):
        print(f"Labels file not found: {labels_file}")
        sys.exit(1)

    # Run image description script
    print("Running image description...")
    script_command = [
        sys.executable,  # Use the same Python interpreter
        'script.py',
        args.input_image,
        labels_file,
        '--model_to_use', args.model_to_use,
        '--icon_detection_path', args.icon_detection_path,
        '--cache_directory', args.cache_directory,
        '--huggingface_token', args.huggingface_token
    ]
    # Append optional flags if specified
    if args.save_images:
        script_command.append('--save_images')

    if args.no_captioning:
        script_command.append('--no-captioning')

    subprocess.run(script_command, check=True)

if __name__ == '__main__':
    init()
