import os
import base64
import subprocess

from fastapi import FastAPI, HTTPException, Depends
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from pydantic import BaseModel
import openai

app = FastAPI(title="deki-automata API")

OPENAI_API_KEY = os.environ.get("OPENAI_API_KEY")

# Something like a small password that you set and
# only clients that know this token can use functionalities of the server
API_TOKEN = os.environ.get("API_TOKEN")
if not OPENAI_API_KEY or not API_TOKEN:
    raise RuntimeError("OPENAI_API_KEY and API_TOKEN must be set in environment variables.")

openai.api_key = OPENAI_API_KEY

class AnalyzeRequest(BaseModel):
    image: str  # Base64-encoded image
    prompt: str  # User prompt (like "Open whatsapp and write my friend user_name that I will be late for 15 minutes")

security = HTTPBearer()

def verify_token(credentials: HTTPAuthorizationCredentials = Depends(security)):
    if credentials.credentials != API_TOKEN:
        raise HTTPException(status_code=401, detail="Invalid API token")
    return credentials.credentials

def run_wrapper(image_path: str) -> str:
    """
    Calls wrapper.py via subprocess to generate an image description.
    Assumes that wrapper.py will create a file in ./result named after the input image
    (if image_path is 'uploaded_image.png', then either
     './result/uploaded_image.json' or './result/uploaded_image.txt' will be created).
    """
    try:
        # Example command. You can adjust it as you want, like, remove --json etc. (Read instructions in ./README.md)
        subprocess.run(
            ["python", "/code/wrapper.py", "--input_image", image_path, "--weights_file", "/code/best.pt", "--no-captioning", "--json"],
            capture_output=True, text=True, check=True
        )
    except subprocess.CalledProcessError as e:
        raise Exception(f"Wrapper execution failed: {e.stderr}")

    # Determine the base name of the image (without extension)
    base_name = os.path.splitext(os.path.basename(image_path))[0]
    result_dir = os.path.join(os.getcwd(), "result")
    json_file = os.path.join(result_dir, f"{base_name}.json")
    txt_file = os.path.join(result_dir, f"{base_name}.txt")

    description = None
    if os.path.exists(json_file):
        try:
            with open(json_file, "r", encoding="utf-8") as f:
                description = f.read()
        except Exception as e:
            raise Exception(f"Failed to read JSON description file: {e}")
    elif os.path.exists(txt_file):
        try:
            with open(txt_file, "r", encoding="utf-8") as f:
                description = f.read()
        except Exception as e:
            raise Exception(f"Failed to read TXT description file: {e}")
    else:
        raise Exception("No image description file was generated by wrapper.py")

    return description

@app.post("/analyze")
async def analyze(request: AnalyzeRequest, token: str = Depends(verify_token)):
    """
    Processes the input image (in base64 format) and a user prompt:
    1. Decodes and saves the image.
    2. Runs the wrapper.py script (via run_wrapper) to generate an image description.
    3. Constructs a detailed prompt for ChatGPT that includes:
       - Allowed commands.
       - The user prompt.
       - The generated image description.
       - The original image in a base64 format.
    4. Sends the prompt to ChatGPT (via OpenAI API) and returns the command response.
    """

    # Remove data URI header if present
    image_data = request.image
    if image_data.startswith("data:image"):
        _, image_data = image_data.split(",", 1)
    
    # Decode the base64 image
    try:
        img_bytes = base64.b64decode(image_data)
    except Exception as e:
        raise HTTPException(status_code=400, detail=f"Invalid base64 image data: {e}")
    
    # Save the image to a temporary file
    image_path = "uploaded_image.png"
    try:
        with open(image_path, "wb") as f:
            f.write(img_bytes)
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Failed to save image: {e}")
    
    # Generate image description using run_wrapper (which reads the output file from ./result)
    try:
        image_description = run_wrapper(image_path)
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Image processing failed: {e}")
    
    # Prepare the image as a Data URL (with the "data:image/png;base64," prefix)
    base64_image_url = f"data:image/png;base64,{image_data}"
    
    # Construct the messages for ChatGPT using a multi-part structure
    messages = [
        {
            "role": "user",
            "content": [
                {
                    "type": "text",
                    "text": '''You are controlling a mobile device. You can only respond with one of these commands (in quotes):
1. "Swipe left"
2. "Swipe right"
3. "Swipe top"
4. "Swipe bottom"
5. "Go home"
6. "Open com.whatsapp" (or other app)
7. "Tap coordinates 300,400" (or other coordinates)
8. "Insert text 300,400:Hello world" (or other coordinates and text)
9. "Finished" (task is finished)
10. "Can't proceed" (Can't understand what to do or image has problem etc.. Better to not continue)

The user said: "{0}"

Please respond with exactly one valid command from the list (formatted precisely), without extra words or explanation.

I will share the screenshot of the current state of the phone and the description (sizes and coordinates) of UI elements.
Description:
"{1}"'''.format(request.prompt, image_description)
                },
                {
                    "type": "image_url",
                    "image_url": {
                        "url": base64_image_url,
                        "detail": "low"
                    }
                }
            ]
        }
    ]
    
    # Call the OpenAI API with the prepared messages.
    try:
        response = openai.chat.completions.create(
            model="gpt-4o-mini",  # or use "gpt-4o"
            messages=messages,
            max_tokens=4000,
            temperature=0.2
        )
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"OpenAI API error: {e}")
    
    command_response = response.choices[0].message.content.strip()
    return {"response": command_response}
