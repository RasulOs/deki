import os
import sys
import argparse
from ultralytics import YOLO
from os.path import basename, splitext
import time

from yolo_script import process_yolo

from script import process_image

def process_image_description(
    input_image: str,
    weights_file: str,
    output_dir: str = './output',
    model_to_use: str = 'llama',
    save_images: bool = False,
    icon_detection_path: str = None,
    cache_directory: str = './models_cache',
    huggingface_token: str = 'your_token',
    no_captioning: bool = False,
    output_json: bool = False,
    model_obj: YOLO = None,
    sr=None,
    reader=None,
    spell=None,
    skip_ocr=False,
    skip_spell=False
) -> None:
    """
    Processes an image by running YOLO detection (via the imported process_yolo function)
    and then calling process_image() from script.py to do the image description work.
    
    Parameters:
      - input_image: Path to the input image.
      - weights_file: Path to the YOLO weights file.
      - output_dir: Directory for YOLO output (default: './output').
      - model_to_use: Which model to use for captioning ('llama' or 'blip').
      - save_images: Whether to save intermediate images.
      - icon_detection_path: Optional path to an icon detection model.
      - cache_directory: Cache directory for models.
      - huggingface_token: Hugging Face token for model downloads.
      - no_captioning: If True, disable image captioning.
      - output_json: If True, output the results in JSON format.
      - model_obj: YOLO object that was initialized at a startup time (optional)
      - sr: Super resolution object (optional)
      - reader: EasyOCR object (optional)
      - spell: Spell checker object (optional)
    """

    # Ensure the output directory exists.
    os.makedirs(output_dir, exist_ok=True)
    
    # Determine the base name of the input image.
    base_name = splitext(basename(input_image))[0]
    
    print("Running YOLO detection...")
    start_time = time.perf_counter()
    print("process_yolo start (in wrapper.py)")
    process_yolo(input_image, weights_file, output_dir, model_obj=model_obj)
    elapsed = time.perf_counter() - start_time
    print(f"process_yolo (in wrapper.py) took {elapsed:.3f} seconds.")
    
    # Locate the label file generated by YOLO
    labels_dir = os.path.join(output_dir, 'yolo_labels_output', 'labels')
    label_file = os.path.join(labels_dir, base_name + '.txt')
    if not os.path.isfile(label_file):
        raise FileNotFoundError(f"Labels file not found: {label_file}")

    print("Running image description...")
    start_time = time.perf_counter()
    print("process_image start (in wrapper.py)")
    process_image(
        input_image_path=input_image,
        yolo_output_path=label_file,
        model_to_use=model_to_use,
        save_images=save_images,
        icon_model_path=icon_detection_path,
        cache_directory=cache_directory,
        huggingface_token=huggingface_token,
        no_captioning=no_captioning,
        output_json=output_json,
        sr=sr,
        reader=reader,
        spell=spell,
        skip_ocr=skip_ocr,
        skip_spell=skip_spell
    )
    elapsed = time.perf_counter() - start_time
    print(f"process_image (in wrapper.py) took {elapsed:.3f} seconds.")

if __name__ == '__main__':
    # Command-line interface
    parser = argparse.ArgumentParser(
        description='Wrapper script to run YOLO detection and image description in sequence.'
    )
    parser.add_argument('--input_image', required=True, help='Path to the input image.')
    parser.add_argument('--weights_file', required=True, help='Path to the YOLO weights file.')
    parser.add_argument('--output_dir', default='./output', help='Output directory for YOLO results.')
    parser.add_argument('--model_to_use', choices=['llama', 'blip'], default='llama',
                        help='Model to use for captioning.')
    parser.add_argument('--save_images', action='store_true',
                        help='Flag to save intermediate images.')
    parser.add_argument('--icon_detection_path', help='Path to the icon detection model.')
    parser.add_argument('--cache_directory', default='./models_cache',
                        help='Cache directory for models.')
    parser.add_argument('--huggingface_token', default='your_token',
                        help='Hugging Face token for model downloads.')
    parser.add_argument('--no-captioning', action='store_true',
                        help='Disable any image captioning')
    parser.add_argument('--json', dest='output_json', action='store_true',
                        help='Output the image data in JSON format')
    parser.add_argument('--skip-ocr', action='store_true',
                        help='Disable OCR & spell-checking (faster).')
    parser.add_argument('--skip-spell', action='store_true', help='Run OCR but skip spell-check')
    
    args = parser.parse_args()
    
    try:
        process_image_description(
            input_image=args.input_image,
            weights_file=args.weights_file,
            output_dir=args.output_dir,
            model_to_use=args.model_to_use,
            save_images=args.save_images,
            icon_detection_path=args.icon_detection_path,
            cache_directory=args.cache_directory,
            huggingface_token=args.huggingface_token,
            no_captioning=args.no_captioning,
            output_json=args.output_json,
            skip_ocr=args.skip_ocr,
            skip_spell=args.skip_spell
        )
    except Exception as e:
        print(e)
        sys.exit(1)
